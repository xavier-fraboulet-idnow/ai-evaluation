package eu.europa.ec.eudi.signer.rssp.security.jwt;

import eu.europa.ec.eudi.signer.rssp.security.jwt.JwtProvider;

// Generated by qodo Gen

import eu.europa.ec.eudi.signer.rssp.security.jwt.JwtProviderConfig;
import eu.europa.ec.eudi.signer.rssp.security.jwt.JwtToken;
import org.junit.Test;
import static org.junit.Assert.*;

public class CodiumJwtProviderTest {


    // Creating a valid JWT token with correct subject and type
    @Test
    public void test_create_valid_jwt_token() {
        JwtProviderConfig config = new JwtProviderConfig();
        config.setLifetimeMinutes(60);
        config.setTokenSecret("secret");
        config.setType("access");
    
        JwtProvider jwtProvider = new JwtProvider(config);
        String subject = "user123";
    
        JwtToken token = jwtProvider.createToken(subject);
    
        assertNotNull(token.getRawToken());
        assertEquals(subject, token.getSubject());
        assertEquals("access", token.getType());
        assertTrue(token.isValid());
    }

    // Handling expired JWT tokens gracefully
    @Test
    public void test_handle_expired_jwt_token() {
        JwtProviderConfig config = new JwtProviderConfig();
        config.setLifetimeMinutes(-1); // Set negative to simulate expiration
        config.setTokenSecret("secret");
        config.setType("access");
    
        JwtProvider jwtProvider = new JwtProvider(config);
        String subject = "user123";
    
        JwtToken token = jwtProvider.createToken(subject);
    
        JwtToken validatedToken = jwtProvider.validateToken(token.getRawToken());
    
        assertFalse(validatedToken.isValid());
        assertTrue(validatedToken.isExpired());
        assertEquals("JWT token is expired", validatedToken.getError());
    }

    // Parsing a valid JWT token to extract claims successfully
    @Test
    public void test_parse_valid_jwt_token() {
        JwtProviderConfig config = new JwtProviderConfig();
        config.setLifetimeMinutes(60);
        config.setTokenSecret("secret");
        config.setType("access");

        JwtProvider jwtProvider = new JwtProvider(config);
        String subject = "user123";

        JwtToken createdToken = jwtProvider.createToken(subject);
        JwtToken parsedToken = jwtProvider.parseToken(createdToken.getRawToken());

        assertNotNull(parsedToken.getRawToken());
        assertEquals(subject, parsedToken.getSubject());
        assertEquals("access", parsedToken.getType());
        assertTrue(parsedToken.isValid());
    }
}